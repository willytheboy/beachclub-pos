
import { Dispatch } from '@reduxjs/toolkit';
import { addCustomer, Customer } from './customerSlice';

/**
 * Generate a unique customer reference string.
 */
function generateCustomerReference(): string {
  return (
    'CUST-' + Date.now().toString(36) + '-' + Math.floor(Math.random() * 1e6).toString(36)
  );
}

/**
 * Create a QR code payload based on the customer reference.
 */
function createQrData(reference: string): string {
  return `customer:${reference}`;
}

/**
 * Send the QR code to the customer's email and WhatsApp number.
 * This placeholder just logs to console until real integrations are added.
 */
function sendQr(reference: string, email?: string, phone?: string) {
  console.log(`Send QR for ${reference} to email ${email} and WhatsApp ${phone}`);
}

export interface NewCustomerInput {
  name: string;
  email?: string;
  phone?: string;
}

/**
 * Create a customer with autogenerated reference and QR code.
 * Dispatches the new customer to the Redux store and triggers delivery
 * of the QR code via email and WhatsApp.
 */
export function createCustomer(input: NewCustomerInput, dispatch: Dispatch<any>): Customer {
  const reference = generateCustomerReference();
  const qrData = createQrData(reference);

  const customer: Customer = {
    id: reference,
    name: input.name,
    email: input.email,
    phone: input.phone,
    qrData,
  };

  dispatch(addCustomer(customer));
  sendQr(reference, input.email, input.phone);

  return customer;
}

/**
 * Look up a customer by scanning their QR code data.
 * Returns the matching customer from the provided list or undefined.
 */
export function findCustomerByQr(qrData: string, customers: Customer[]): Customer | undefined {
  return customers.find((c) => c.qrData === qrData);
}

// Customer search/add service placeholders
export function initCustomer() {
  // TODO: implement additional startup logic if needed
}
